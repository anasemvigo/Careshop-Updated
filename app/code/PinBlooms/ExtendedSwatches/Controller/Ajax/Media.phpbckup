<?php
/**
 *
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
namespace PinBlooms\ExtendedSwatches\Controller\Ajax;

use Magento\Framework\App\Action\Context;
use Magento\Framework\Controller\ResultFactory;

/**
 * Class Media
 */
class Media extends \Magento\Framework\App\Action\Action implements \Magento\Framework\App\Action\HttpGetActionInterface
{
    /**
     * @var \Magento\Catalog\Model\Product Factory
     */
    protected $productModelFactory;

    /**
     * @var \Magento\Swatches\Helper\Data
     */
    private $swatchHelper;

    /**
     * @var \Magento\PageCache\Model\Config
     */
    protected $config;


   protected $configurable;
    protected $grouped;
 
 
    /**
     * @param Context $context
     * @param \Magento\Catalog\Model\ProductFactory $productModelFactory
     * @param \Magento\Swatches\Helper\Data $swatchHelper
     * @param \Magento\PageCache\Model\Config $config
     */
    public function __construct(
        Context $context,
        \Magento\Catalog\Model\ProductFactory $productModelFactory,
		\Magento\ConfigurableProduct\Model\Product\Type\Configurable $configurable,
        \Magento\GroupedProduct\Model\Product\Type\Grouped $grouped,
        \Magento\Swatches\Helper\Data $swatchHelper,
        \Magento\PageCache\Model\Config $config
    ) {
        $this->productModelFactory = $productModelFactory;
        $this->swatchHelper = $swatchHelper;
        $this->config = $config;
		
		  $this->configurable = $configurable;
    $this->grouped = $grouped;

        parent::__construct($context);
    }

    /**
     * Get product media for specified configurable product variation
     *
     * @return string
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function execute()
    {
		

		
		
        $productMedia = [];

        /** @var \Magento\Framework\Controller\Result\Json $resultJson */
        $resultJson = $this->resultFactory->create(ResultFactory::TYPE_JSON);

        /** @var \Magento\Framework\App\ResponseInterface $response */
        $response = $this->getResponse();



		$productIds = $this->getRequest()->getParam('product_id');
		
		



		if (is_array($productIds)) {
			

			
			foreach($productIds as $key => $productId ){
				
						
						
						
				if ($productId) {
					
					
					
            $product = $this->productModelFactory->create()->load((int) $productId);
            $productMediaar = $this->swatchHelper->getProductMediaGallery(
                $product
            );
	

			
		
				$productMedia = array_replace_recursive($productMediaar,$productMedia); 

			
		
			   $resultJson->setHeader('X-Magento-Tags', implode(',', $product->getIdentities()));

			
			}
			}
			
			$getParentId = $this->getParentId($productIds[0]);
			
			
			if($getParentId){
				
				 $product = $this->productModelFactory->create()->load((int) $productId);
            $productMediaar = $this->swatchHelper->getProductMediaGallery(
                $product
            );
	

			
		
				$productMedia = array_replace_recursive($productMediaar,$productMedia); 
				$resultJson->setHeader('X-Magento-Tags', implode(',', $product->getIdentities()));


			}
			
				
		}else {
			if ($productId = (int)$this->getRequest()->getParam('product_id')) {
            $product = $this->productModelFactory->create()->load($productId);
            $productMedia = $this->swatchHelper->getProductMediaGallery(
                $product
            );
			
			
         
         
        }
		}


           $response->setPublicHeaders($this->config->getTtl());

        $resultJson->setData($productMedia);
        return $resultJson;
    }
	
	 public function  getParentId($childId){
    /* for simple product of configurable product */
        $product = $this->configurable->getParentIdsByChild($childId);
        if(isset($product[0])){
         return $product[0];
       }
	   
	    /* for simple product of Group product */
       $parentIds = $this->grouped->getParentIdsByChild($childId);
        /* or for Group/Bundle Product */
           $product->getTypeInstance()->getParentIdsByChild($childId);
    }
	   
	   
}
